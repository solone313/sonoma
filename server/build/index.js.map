{"version":3,"file":"index.js","names":["require","_express","_interopRequireDefault","_mongoose","_http","_fs","_path","_passport","_expressListEndpoints","_cors","_routes","_seed","obj","__esModule","default","app","express","use","json","urlencoded","extended","passport","initialize","corsOption","origin","credentials","cors","isProduction","process","env","NODE_ENV","dbConnection","MONGO_URI_PROD","MONGO_URI_DEV","mongoose","connect","useNewUrlParser","useCreateIndex","useUnifiedTopology","useFindAndModify","then","console","log","seedDb","catch","err","routes","static","join","__dirname","port","PORT","listen","server","http","createServer"],"sources":["../src/index.js"],"sourcesContent":["import 'dotenv/config';\nimport express from 'express';\nimport mongoose from 'mongoose';\nimport http from 'http';\nimport { readFileSync } from 'fs';\nimport { resolve, join } from 'path';\nimport passport from 'passport';\nimport all_routes from 'express-list-endpoints';\nimport cors from 'cors';\n\n\nimport routes from './routes';\nimport { seedDb } from './utils/seed';\n\nconst app = express();\n\n// Bodyparser Middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\napp.use(passport.initialize());\nrequire('./services/jwtStrategy');\nrequire('./services/localStrategy');\nlet corsOption = {\n  origin: 'http://localhost:3000', // 허락하는 요청 주소\n  credentials: true // true로 하면 설정한 내용을 response 헤더에 추가 해줍니다.\n} \n\napp.use(cors(corsOption)); // CORS 미들웨어 추가\n\n\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// DB Config\nconst dbConnection = isProduction ? process.env.MONGO_URI_PROD : process.env.MONGO_URI_DEV;\n\n// Connect to Mongo\nmongoose\n  .connect(dbConnection, {\n    useNewUrlParser: true,\n    useCreateIndex: true,\n    useUnifiedTopology: true,\n    useFindAndModify: false,\n  })\n  .then(() => {\n    console.log('MongoDB Connected...');\n    seedDb();\n  })\n  .catch((err) => console.log(err));\n\n// Use Routes\napp.use('/', routes);\napp.use('/public/images', express.static(join(__dirname, '../public/images')));\n\n// Serve static assets if in production\nif (isProduction) {\n  // Set static folder\n  // nginx will handle this\n  // app.use(express.static(join(__dirname, '../../client/build')));\n\n  // app.get('*', (req, res) => {\n  //   // index is in /server/src so 2 folders up\n  //   res.sendFile(resolve(__dirname, '../..', 'client', 'build', 'index.html')); \n  // });\n\n  const port = process.env.PORT || 80;\n  app.listen(port, () => console.log(`Server started on port ${port}`));\n} else {\n  const port = process.env.PORT || 4000;\n  // const httpsOptions = {\n  //   key: readFileSync(resolve(__dirname, '../security/cert.key')),\n  //   cert: readFileSync(resolve(__dirname, '../security/cert.pem')),\n  // };\n\n  const server = http.createServer(app).listen(port, () => {\n    console.log('https server running at ' + port);\n    // console.log(all_routes(app));\n  });\n}\n"],"mappings":"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"}